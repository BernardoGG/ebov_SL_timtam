} else if (num_samples %% 2 == 1) {
taxa_times[day_mask] <-
seq(from = day, to = day + 1, length.out = num_samples + 2 + 1) |>
head(-2) |>
tail(-1)
} else {
stop("Could not make taxa sample times.")
}
}
taxa_times
taxa_days
disaster_times
end_date - decimal_date(time_series_uniform$date)
seq(from = 28.5, to = -9.5, by = -1)
taxon_dates
end_date
time_series_uniform$date
date_decimal(time_series_uniform$date)
end_date
date_decimal(end_date)
difftime(date_decimal(time_series_uniform$date),
date_decimal(end_date),
unit = 'days')
time_series_uniform$date
difftime(time_series_uniform$date,
date_decimal(end_date),
unit = 'days')
difftime(time_series_uniform$date,
date_decimal(end_date),
unit = 'days') |> floor()
seq(from = 28.5, to = -9.5, by = -1)
difftime(date_decimal(end_date),
time_series_uniform$date,
unit = 'days') |> floor()
difftime(date_decimal(end_date),
time_series_uniform$date,
unit = 'days') |> floor() + 0.5
taxa_times
difftime(time_series_uniform$date,
date_decimal(start_date),
unit = 'days') |> floor() + 0.5
difftime(time_series_uniform$date,
date_decimal(start_date),
unit = 'days')
start_date
date_decimal(start_date)
min(time_series_uniform$date)
ebov_sl_cases$start |>
as.Date() |>
decimal_date() |>
min()
View(time_series_uniform)
# Plot to inspect visually
ggplot(time_series_uniform) +
geom_col(aes(x = date, y = count)) +
theme_minimal()
seq.Date(min(Var1), max(Var1), by="day")
seq.Date(min(time_series_uniform$date), max(time_series_uniform$date), by="day")
View(agg_occ_df)
View(ebov_sl_cases)
########################## Set analysis time span ##############################
## Start time: first day of first epidemiological week in time series
start_date <- ebov_sl_cases$start |>
as.Date() |>
min()
## End time: last day of last collected genome sequence, coincides with last day
## of last epidemiological week in time series
end_date <- taxon_strings |>
str_extract(pattern = "(2014)[-][0-9][0-9][-][0-9][0-9].*$") |>
as.Date() |>
max()
min(time_series_uniform$date)
min(time_series$start)
start_date
time_series_uniform <- NULL
for(i in 1:nrow(time_series)){
tmp <- sample(seq.Date(time_series$start[i], time_series$end[i],
by = "days"),
time_series$total[i],
replace = ifelse(time_series$total[i] <= 7,
FALSE,
TRUE)) |>
table() |>
as.data.frame()
time_series_uniform <-  rbind(time_series_uniform, tmp)
}
time_series_uniform <- time_series_uniform |>
mutate(Var1 = as.Date(Var1)) |>
complete(Var1 = seq.Date(min(Var1), max(Var1), by="day")) |>
mutate(Freq = replace_na(Freq, 0))
colnames(time_series_uniform) <-  c("date", "count")
min(time_series_uniform$date)
# Plot to inspect visually
ggplot(time_series_uniform) +
geom_col(aes(x = date, y = count)) +
theme_minimal()
difftime(time_series_uniform$date,
date_decimal(start_date),
unit = 'days') + 0.5
difftime(time_series_uniform$date,
start_date,
unit = 'days') + 0.5
time_series_uniform$count
####################### Get disaster times and sizes ###########################
disaster_times <- str_flatten(
string = difftime(time_series_uniform$date,
start_date,
unit = 'days') + 0.5,
collapse = " "
)
disaster_sizes <- str_flatten(
string = time_series_uniform$count,
collapse = " "
)
print("Here are the EBOV in Sierra Leone DISASTER TIMES")
print(disaster_times)
print("Here are the EBOV in Sierra Leone DISASTER SIZES")
print(disaster_sizes)
length(disaster_times)
length(difftime(time_series_uniform$date,
start_date,
unit = 'days') + 0.5)
length(time_series_uniform)
length(time_series_uniform$count)
legnth(taxa_times)
length(taxa_times)
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal()
## Plot sequences by epidemiological week and by day
x <- ggplot(ebov_sl_cases, aes(x = mid_date, y = sequenced)) +
geom_col() +
labs(x = "Date (mid-week)",
y = "Number of sequences\n(aggregated over epiweeks)")
y <- ggplot(seq_meta, aes(x = collection_date)) +
geom_bar() +
labs(x = "Date", y = "Number of sequences\n(daily)") +
xlim(min(ebov_sl_cases$start), max(ebov_sl_cases$end))
x / y
########################### Summaries and plots ################################
## Summary of cases and sequences
rm(seqs_cases)
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxa_names,
day = taxa_times)
taxa_times
taxa_names
rm(taxa_names)
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxon_strings,
day = taxa_times) |>
write.table("dataset_B_cds_sample_days.tsv",
sep="\t",
header = TRUE)
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxon_strings,
day = taxa_times) |>
write.table("dataset_B_cds_sample_days.tsv",
sep="\t")
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxon_strings,
day = taxa_times) |>
write.table("dataset_B_cds_sample_days.tsv",
sep="\t",
row.names = FALSE)
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxon_strings,
day = taxa_times) |>
write.table("dataset_B_cds_sample_days.tsv",
sep="\t",
row.names = FALSE,
quote = FALSE)
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
cat("\n")
start_date
end_date
difftime(start_date, end_date, "days")
range(taxa_times)
range(taxa_times)
range(taxa_times)
range(taxa_days)
range(taxon_dates)
date_decimal(range(taxon_dates))
taxa_times
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
cat("\n")
taxon_dates
taxa_days
taxa_times
taxa_days
data.frame(taxa = taxon_strings,
day = taxa_times)
taxa_days
difftime(date_decimal(taxon_dates),
date_decimal(end_date),
unit = 'days')
library(tidyverse)
library(lubridate)
library(SGmisc)
library(ape)
library(stringr)
library(magrittr)
difftime(date_decimal(taxon_dates),
date_decimal(end_date),
unit = 'days')
start_date
end_date
taxa_days
difftime(date_decimal(taxon_dates),
date_decimal(start_date),
unit = 'days')
taxon_dates
date_decimal(taxon_dates)
difftime(date_decimal(taxon_dates),
start_date,
unit = 'days')
taxa_days
difftime(date_decimal(taxon_dates),
end_date,
unit = 'days')
date_decimal(taxon_dates)
start_date
difftime(end_date,
date_decimal(taxon_dates),
#                      start_date,
unit = 'days')
difftime(date_decimal(taxon_dates),
start_date,
unit = 'days')
taxon_dates
date_decimal(taxon_dates)
start_date
end_date
date_decimal(taxon_dates) |> as.Date()
difftime(date_decimal(taxon_dates) |> as.Date(),
end_date,
unit = 'days')
difftime(date_decimal(taxon_dates) |> as.Date(),
end_date,
unit = 'days') * (-1)
taxa_days
################## Change dates to relative epidemic days ######################
################### Adapted from Antoine Zwaans function #######################
taxa_days <- difftime(date_decimal(taxon_dates) |> as.Date(),
end_date,
unit = 'days') * (-1)
taxa_times <- numeric(length(taxa_days))
for (day in unique(taxa_days)) {
day_mask <- taxa_days == day
num_samples <- sum(day_mask)
if (num_samples %% 2 == 0) {
taxa_times[day_mask] <-
seq(from = day, to = day + 1, length.out = num_samples + 2) |>
head(-1) |>
tail(-1)
} else if (num_samples %% 2 == 1) {
taxa_times[day_mask] <-
seq(from = day, to = day + 1, length.out = num_samples + 2 + 1) |>
head(-2) |>
tail(-1)
} else {
stop("Could not make taxa sample times.")
}
}
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxon_strings,
day = taxa_times) |>
write.table("dataset_B_cds_sample_days.tsv",
sep="\t",
row.names = FALSE,
quote = FALSE)
data.frame(taxa = taxon_strings,
day = taxa_times)
########### Export sequence new sampling 'dates' as epidemic days ##############
data.frame(taxa = taxon_strings,
day = taxa_times) |>
write.table("dataset_B_cds_sample_days.dat",
sep="\t",
row.names = FALSE,
quote = FALSE)
####################### Get disaster times and sizes ###########################
disaster_times <- str_flatten(
string = difftime(time_series_uniform$date,
start_date,
unit = 'days') + 0.5,
collapse = " "
)
disaster_sizes <- str_flatten(
string = time_series_uniform$count,
collapse = " "
)
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
cat("\n")
####################### Get disaster times and sizes ###########################
disaster_times <- str_flatten(
string = difftime(time_series_uniform$date,
end_date,
unit = 'days') + 0.5,
collapse = " "
)
disaster_sizes <- str_flatten(
string = time_series_uniform$count,
collapse = " "
)
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
cat("\n")
####################### Get disaster times and sizes ###########################
disaster_times <- str_flatten(
string = (difftime(time_series_uniform$date,
end_date,
unit = 'days') + 0.5) * (-1),
collapse = " "
)
disaster_sizes <- str_flatten(
string = time_series_uniform$count,
collapse = " "
)
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
cat("\n")
length(disaster_sizes)
length((difftime(time_series_uniform$date,
end_date,
unit = 'days') + 0.5) * (-1))
length(time_series_uniform$count)
(difftime(time_series_uniform$date,
end_date,
unit = 'days') + 0.5) * (-1)
taxa_times
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal()
View(agg_occ_df)
rm(agg_occ_df)
View(ebov_sl_cases)
View(time_series_uniform)
time_series
time_series_uniform
ggplot(time_series_uniform, aes(x = date, y = count)) +
geom_col() +
labs(x = "Date",
y = "Number of cases (uniformly\ndistributed over epiweeks)")
ggplot(time_series_uniform, aes(x = date, y = count)) +
geom_col() +
labs(x = "Date",
y = "Number of cases (uniformly\ndistributed over epiweeks)") +
theme_minimal()
ggplot(ebov_sl_cases, aes(x = mid_date, y = sequenced)) +
geom_col() +
labs(x = "Date (mid-week)",
y = "Number of sequences\n(aggregated over epiweeks)") +
theme_minimal()
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal()
View(ebov_sl_cases)
ebov_sl_cases$sequenced/ebov_sl_cases$total
library(ape)
library(stringr)
library(magrittr)
ebov_sl_cases$sequenced/ebov_sl_cases$total %>% str_flatten()
ebov_sl_cases$sequenced/ebov_sl_cases$total %>% str_flatten(collapse = " ")
disaster_sizes
time_series_uniform$count
str_flatten(string = ebov_sl_cases$sequenced/ebov_sl_cases$total, collapse = " ")
str_flatten(string = ebov_sl_cases$unsequenced/ebov_sl_cases$total, collapse = " ")
difftime(time_series_uniform$date,
end_date,
unit = 'weeks'))
(difftime(time_series_uniform$date,
end_date,
unit = 'weeks'))
ebov_sl_cases$start
end_date
difftime(ebov_sl_cases$start, end_date)
difftime(ebov_sl_cases$end, end_date)
difftime(ebov_sl_cases$end, end_date, units = 'days')
difftime(ebov_sl_cases$end, end_date, units = 'days')[1:6]
difftime(ebov_sl_cases$end, end_date, units = 'days')[1:10]
change_times_weekly <- str_flatten(
string = difftime(ebov_sl_cases$end, end_date,
units = 'days')[1:10] * (-1),
collapse = " "
)
change_times_weekly
change_times_weekly + 0.375
str_flatten(
string = difftime(ebov_sl_cases$end, end_date,
units = 'days')[1:10] * (-1) + 0.375,
collapse = " "
)
change_times_weekly <- difftime(ebov_sl_cases$end, end_date,
units = 'days')[1:10] * (-1)
history_times <- str_flatten(
string = change_times_weekly + 0.375,
collapse = " "
)
history_times
######################## Print in console/terminal #############################
cat("\nDisaster times:\n")
cat(disaster_times)
cat("\n\nDisaster sizes:\n")
cat(disaster_sizes)
cat("\n\nHistory times:\n")
cat(history_times)
cat("\n")
change_times_weekly
0.001/365
3.2984e-6 * 365
str_flatten(string = ebov_sl_cases$sequenced/ebov_sl_cases$total, collapse = " ")
ebov_sl_cases$sequenced/ebov_sl_cases$total
mean(ebov_sl_cases$sequenced/ebov_sl_cases$total)
mean(ebov_sl_cases$unsequenced/ebov_sl_cases$total)
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal()
library(ggplot2)
library(patchwork)
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal()
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
scale_y_continuous(name = "Number of cases",
sec.axis = sec_axis(
name = "Number of genomic sequences")) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal() +
theme(axis.title.y.right = element_text(color = "darkred"),
axis.text.y.right = element_text(color = "darkred"))
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
scale_y_continuous(name = "Number of cases",
sec.axis = sec_axis(
trans = ~.*1
name = "Number of genomic sequences")) +
############################## Summary plots ###################################
## Plot cases and sequences by epidemiological week
ggplot(ebov_sl_cases, aes(x = epiweek, y = total)) +
geom_col(fill = "lightgrey") +
geom_line(aes(x = epiweek, y = sequenced),
color = "darkred", linewidth = 1) +
scale_y_continuous(name = "Number of cases",
sec.axis = sec_axis(
trans = ~.*1,
name = "Number of genomic sequences")) +
labs(x = "Epiweek", y = "Number of cases") +
theme_minimal() +
theme(axis.title.y.right = element_text(color = "darkred"),
axis.text.y.right = element_text(color = "darkred"))
## Plot sequences by epidemiological week and by day
x <- ggplot(ebov_sl_cases, aes(x = mid_date, y = sequenced)) +
geom_col() +
labs(x = "Date (mid-week)",
y = "Number of sequences\n(aggregated over epiweeks)") +
theme_minimal()
y <- ggplot(seq_meta, aes(x = collection_date)) +
geom_bar() +
labs(x = "Date", y = "Number of sequences\n(daily)") +
xlim(min(ebov_sl_cases$start), max(ebov_sl_cases$end))
x / y
ls
